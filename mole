#!/bin/bash

usage() { printf " mole [-g GROUP] FILE\n mole [-m] [FILTERS] [DIRECTORY]\n mole list [FILTERS] [DIRECTORY]\n mole secret-log [-b DATE] [-a DATE] [DIRECTORY1 [DIRECTORY2 [...]]\n" 1>&2; exit 0; }
# check_groups() {
#    grep "^[A-Za-z1-9,]*$" 
# }
write_a_record() {
    temp="$(grep -m 1 "$1;$2;" "$MOLE_RC")"
    if [ "$temp" = "" ]
    then
        if [ "$3" = "" ]
        then
            echo "$1;$2;;$4" >> "$MOLE_RC"
        else
            echo "$1;$2;$3,;$4" >> "$MOLE_RC"
        fi
    else
        if [ "$3" = "" ] || [ "$(echo "$temp" | awk -F ';' -v newgroupsstr="$3" 'BEGIN{newgroupsnum=split(newgroupsstr, newgrps, ","); counter = 0;} {oldgroupsnum=split($3, oldgrps, ","); for (i in oldgrps) {for (j in newgrps) {if (oldgrps[i] == newgrps[j]) {counter=counter+1;}}};} END{if (newgroupsnum == counter) {print "dont need"}}')" != "" ]
        then
            sed -i "s#$temp#$temp;$4#" "$MOLE_RC"
        else
            groupsnew="$(echo "$temp" | awk -F ';' -v newgroupsstr="$3" 'BEGIN{newgroupsnum=split(newgroupsstr, newgrps, ",")} {oldgroupsnum=split($3, oldgrps, ","); for (i in oldgrps) {fullgrps[i] = oldgrps[i]}; ogncounter = 0; for (i in newgrps) {needtoadd = 1; for (j in oldgrps) {if (newgrps[i] == oldgrps[j]) {needtoadd = 0; break;}}; if (needtoadd == 1) {fullgrps[oldgroupsnum+ogncounter] = newgrps[i]; ogncounter = ogncounter + 1;}};} END{result = fullgrps[1] ","; for (i = 2; i <= oldgroupsnum+ogncounter-1; i++) {result = result fullgrps[i] ","}; print result}')"
            sed -i "s#$temp#$(echo "$temp"|cut -d ";" -f 1-2);$groupsnew;$(echo "$temp"|cut -d ";" -f 4-);$4#" "$MOLE_RC"
        fi
    fi
}
open_file_from_dir() {
    filename="$(awk -v file="$1" 'BEGIN{FS=OFS=";"} {if ($1==file) {print $0}}' "$MOLE_RC" | awk 'BEGIN{FS=OFS=";"; mindate["date"]=0; mindate["file"]=""; mindate["filepath"]="";} {if (NR==1) {mindate["date"]=$(NF); mindate["file"]=$2; mindate["filepath"]=$1;}; if (mindate["date"] < $(NF)) {mindate["date"]=$(NF); mindate["file"]=$2; mindate["filepath"]=$1;}} END{print mindate["filepath"]"/"mindate["file"]}')"
}
open_file_from_dir_most_freq() {
    filename="$(awk -v file="$1" 'BEGIN{FS=OFS=";"} {if ($1==file) {print $0}}' "$MOLE_RC" | awk 'BEGIN{FS=OFS=";"; mindate["amount"]=0; mindate["file"]=""; mindate["filepath"]="";} {if (NR==1) {mindate["amount"]=NF; mindate["file"]=$2; mindate["filepath"]=$1;}; if (mindate["amount"] < NF) {mindate["amount"]=NF; mindate["file"]=$2; mindate["filepath"]=$1;}} END{print mindate["filepath"]"/"mindate["file"]}')"
}
make_list() {
    awk -v file="$1" 'BEGIN{FS=OFS=";"} {if ($1==file) {print $0}}' "$MOLE_RC" | awk 'BEGIN{FS=OFS=";"; maxlength=0} {if (maxlength < length($2)) {maxlength = length($2);}} END{print maxlength+1}'
}
check_args_correctness() {
    if [ "$1" == "file" ]
    then
        if [ "$2" != "" ]
        then
            echo "Invalid options selected. Use -h for help." 1>&2
            exit 1
        fi
        if [ "$3" != "" ]
        then
            echo "Invalid options selected. Use -h for help." 1>&2
            exit 1
        fi
        if [ "$4" != "" ]
        then
            echo "Invalid options selected. Use -h for help." 1>&2
            exit 1
        fi
    fi
}

if [ "$MOLE_RC" = "" ]
then
    echo "MOLE_RC not set"
    exit 2
fi

if [ "$1" == "list" ]
then
    make_list "$(pwd)"
    exit 0
fi

while getopts ":hmg:a:b:" argum; do
    case "${argum}" in
        h)
            usage
            ;;
        g)
            groups="${OPTARG}"
            ;;
        m)
            recentlyflag="true"
            ;;
        a)
            afterdate="${OPTARG}"
            ;;
        b)
            beforedate="${OPTARG}"
            ;;
        *)
            echo "Invalid options selected. Use -h for help." 1>&2
            exit 1
            ;;
    esac
done
shift "$((OPTIND-1))"


if [ "$1" == "" ]
then
    filename="$(pwd)"
else
    filename="$(realpath -s "$1")"
fi


if [ "$(find "$filename" -type d -maxdepth 0 -exec echo dir \; 2>/dev/null)" == "" ]
then
    check_args_correctness "file" "$recentlyflag" "$afterdate" "$beforedate"
    filepath="$(echo "$filename" | rev | cut -d'/' -f 2- | rev)"
    onlyfilename="$(echo "$filename" | rev | cut -d'/' -f 1 | rev)"
    write_a_record "$filepath" "$onlyfilename" "$groups" "$(date "+%Y-%m-%d_%H-%M-%S")"
    vim "$filename"
else
    check_args_correctness "dir" "$recentlyflag" "$afterdate" "$beforedate"
    if [ "$recentlyflag" != "" ]
    then
        open_file_from_dir_most_freq "$filename"
        filepath="$(echo "$filename" | rev | cut -d'/' -f 2- | rev)"
        onlyfilename="$(echo "$filename" | rev | cut -d'/' -f 1 | rev)"
        write_a_record "$filepath" "$onlyfilename" "$groups" "$(date "+%Y-%m-%d_%H-%M-%S")"
        vim "$filename"
    else
        open_file_from_dir "$filename" "$groups"
        filepath="$(echo "$filename" | rev | cut -d'/' -f 2- | rev)"
        onlyfilename="$(echo "$filename" | rev | cut -d'/' -f 1 | rev)"
        write_a_record "$filepath" "$onlyfilename" "$groups" "$(date "+%Y-%m-%d_%H-%M-%S")"
        vim "$filename"
    fi
fi

# awk -F ';' -v dateA="2023-03-12" '{if (dateA>=$3) {print}}' "$MOLE_RC"