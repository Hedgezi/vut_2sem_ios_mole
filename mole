#!/bin/sh

usage() { printf " mole [-g GROUP] FILE\n mole [-m] [FILTERS] [DIRECTORY]\n mole list [FILTERS] [DIRECTORY]\n mole secret-log [-b DATE] [-a DATE] [DIRECTORY1 [DIRECTORY2 [...]]\n" 1>&2; exit 0; }
# check_groups() {
#    grep "^[A-Za-z1-9,]*$" 
# }
write_a_record() {
    temp="$(grep -m 1 "$1;$2;" "$MOLE_RC")"
    if [ "$temp" = "" ]
    then
        if [ "$3" = "" ]
        then
            echo "$1;$2;;$4" >> "$MOLE_RC"
        else
            echo "$1;$2;$3,;$4" >> "$MOLE_RC"
        fi
    else
        if [ "$3" = "" ] || [ "$(echo "$temp" | awk -F ';' -v newgroupsstr="$3" 'BEGIN{newgroupsnum=split(newgroupsstr, newgrps, ","); counter = 0;} {oldgroupsnum=split($3, oldgrps, ","); for (i in oldgrps) {for (j in newgrps) {if (oldgrps[i] == newgrps[j]) {counter=counter+1;}}};} END{if (newgroupsnum == counter) {print "dont need"}}')" != "" ]
        then
            sed -i "s#$temp#$temp;$4#" "$MOLE_RC"
        else
            groupsnew="$(echo "$temp" | awk -F ';' -v newgroupsstr="$3" 'BEGIN{newgroupsnum=split(newgroupsstr, newgrps, ",")} {oldgroupsnum=split($3, oldgrps, ","); if (oldgroupsnum==0) {oldgroupsnum=1;}; for (i in oldgrps) {fullgrps[i] = oldgrps[i]}; ogncounter = 0; for (i in newgrps) {needtoadd = 1; for (j in oldgrps) {if (newgrps[i] == oldgrps[j]) {needtoadd = 0; break;}}; if (needtoadd == 1) {fullgrps[oldgroupsnum+ogncounter] = newgrps[i]; ogncounter = ogncounter + 1;}};} END{result = fullgrps[1] ","; for (i = 2; i <= oldgroupsnum+ogncounter-1; i++) {result = result fullgrps[i] ","}; print result}')"
            sed -i "s#$temp#$(echo "$temp"|cut -d ";" -f 1-2);$groupsnew;$(echo "$temp"|cut -d ";" -f 4-);$4#" "$MOLE_RC"
        fi
    fi
}
open_file_from_dir() {
    if [ "$1" = "recently" ]
    then
        filename="$(awk -v file="$2" -v groupsstr="$3" -v defaultfl="$6" 'BEGIN{FS=OFS=";"; if (groupsstr != "") {groupsnum=split(groupsstr, groups, ",");}} {if (groupsstr != "") {for (i in groups) {if ($1==file && gsub(groups[i]",", $3) != 0) {print $0}}} else if (defaultfl != "") {if ($1==file && $3 == "") {print $0}} else {if ($1==file) {print $0}}}' "$MOLE_RC" | awk -v afterdate="$4" -v beforedate="$5" 'BEGIN{FS=OFS=";"; if (afterdate=="") {afterdate="1901-12-14"}; if (beforedate=="") {beforedate="9999-01-01"};} {for (i=4; i<NF+1; i+=1) {split($i, datearr, "_"); if (datearr[1] < beforedate && datearr[1] > afterdate) {print $0; next;}}}' | awk 'BEGIN{FS=OFS=";"; mindate["date"]=0; mindate["file"]=""; mindate["filepath"]="";} {if (NR==1) {mindate["date"]=$(NF); mindate["file"]=$2; mindate["filepath"]=$1;}; if (mindate["date"] < $(NF)) {mindate["date"]=$(NF); mindate["file"]=$2; mindate["filepath"]=$1;}} END{print mindate["filepath"]"/"mindate["file"]}')"
    elif [ "$1" = "frequently" ]
    then
        filename="$(awk -v file="$2" -v groupsstr="$3" -v defaultfl="$6" 'BEGIN{FS=OFS=";"; if (groupsstr != "") {groupsnum=split(groupsstr, groups, ",");}} {if (groupsstr != "") {for (i in groups) {if ($1==file && gsub(groups[i]",", $3) != 0) {print $0}}} else if (defaultfl != "") {if ($1==file && $3 == "") {print $0}} else {if ($1==file) {print $0}}}' "$MOLE_RC" | awk -v afterdate="$4" -v beforedate="$5" 'BEGIN{FS=OFS=";"; if (afterdate=="") {afterdate="1901-12-14"}; if (beforedate=="") {beforedate="9999-01-01"};} {for (i=4; i<NF+1; i+=1) {split($i, datearr, "_"); if (datearr[1] < beforedate && datearr[1] > afterdate) {print $0; next;}}}' | awk 'BEGIN{FS=OFS=";"; mindate["amount"]=0; mindate["file"]=""; mindate["filepath"]="";} {if (NR==1) {mindate["amount"]=NF; mindate["file"]=$2; mindate["filepath"]=$1;}; if (mindate["amount"] < NF) {mindate["amount"]=NF; mindate["file"]=$2; mindate["filepath"]=$1;}} END{print mindate["filepath"]"/"mindate["file"]}')"
    else
        echo "Invalid argument in func open_file_from_dir. Coder's problem." 1>&2
        exit 99
    fi

    if [ "$filename" = "/" ]
    then
        echo "No entries that match your filters" 1>&2
        exit 3
    fi
}
check_args_correctness() {
    if [ "$1" = "file" ]
    then
        if [ "$2" != "" ] || [ "$3" != "" ] || [ "$4" != "" ] || [ "$5" != "" ]
        then
            echo "Invalid options selected. Use -h for help." 1>&2
            exit 1
        fi
    elif [ "$1" = "dir" ]
    then
        if [ "$2" != "true" ] && [ "$2" != "" ]
        then
            echo "Coder's problem." 1>&2
            exit 99
        fi
        if [ "$(echo "$3" | grep -E -m 1 "[0-9]{4}-[0-9]{2}-[0-9]{2}")" = "" ] && [ "$3" != "" ]
        then
            echo "Invalid options selected. Use -h for help." 1>&2
            exit 1
        fi
        if [ "$(echo "$4" | grep -E -m 1 "[0-9]{4}-[0-9]{2}-[0-9]{2}")" = "" ] && [ "$4" != "" ]
        then
            echo "Invalid options selected. Use -h for help." 1>&2
            exit 1
        fi
        if [ "$5" != "" ] && [ "$6" != "" ]
        then
            echo "-d and -g not compaitable!" 1>&2
            exit 1
        fi
    elif [ "$1" = "list" ] || [ "$1" = "secret-log" ]
    then
        if [ "$2" != "" ]
        then
            echo "Invalid options selected. Use -h for help." 1>&2
            exit 1
        fi
        if [ "$(echo "$3" | grep -E -m 1 "[0-9]{4}-[0-9]{2}-[0-9]{2}")" = "" ] && [ "$3" != "" ]
        then
            echo "Invalid options selected. Use -h for help." 1>&2
            exit 1
        fi
        if [ "$(echo "$4" | grep -E -m 1 "[0-9]{4}-[0-9]{2}-[0-9]{2}")" = "" ] && [ "$4" != "" ]
        then
            echo "Invalid options selected. Use -h for help." 1>&2
            exit 1
        fi
        if [ "$5" != "" ] && [ "$6" != "" ]
        then
            echo "-d and -g not compaitable!" 1>&2
            exit 1
        fi

    fi
}
check_env_variables() {
    if [ "$MOLE_RC" = "" ]
    then
        echo "MOLE_RC not set"
        exit 2
    fi
    if [ "$EDITOR" = "" ]
    then
        if [ "$VISUAL" = "" ]
        then
            editor='vi'
        else
            editor="$VISUAL"
        fi
    else
        editor="$EDITOR"
    fi
    realpath / 1> /dev/null 2> /dev/null
    if [ "$?" = 127 ]
    then
        echo "Realpath is not installed on your system!" 1>&2
        exit 2
    fi
}
make_list() {
    check_env_variables
    shift 1
    while getopts ":dg:a:b:" argum; do
        case "${argum}" in
            g)
                groups="${OPTARG}"
                ;;
            a)
                afterdate="${OPTARG}"
                ;;
            b)
                beforedate="${OPTARG}"
                ;;
            d)
                defaultflag="true"
                ;;
            *)
                echo "Invalid options selected. Use -h for help." 1>&2
                exit 1
                ;;
        esac
    done
    shift "$((OPTIND-1))"

    check_args_correctness "list" "$recentlyflag" "$afterdate" "$beforedate" "$defaultflag" "$groups"

    if [ "$1" = "" ]
    then
        filename="$(pwd)"
    else
        filename="$(realpath -s "$1")"
    fi

    if [ "$(find "$filename" -type d -maxdepth 0 -exec echo dir \; 2>/dev/null)" != "dir" ]
    then
        echo "mole list needs folder as argument!" 1>&2
        exit 3
    fi

    sort "$MOLE_RC" | awk -v file="$filename" -v groupsstr="$groups" -v defaultfl="$defaultflag" 'BEGIN{FS=OFS=";"; if (groupsstr != "") {groupsnum=split(groupsstr, groups, ",");}} {if (groupsstr != "") {for (i in groups) {kek=$3; if ($1==file && gsub(groups[i]",", "rep", kek) != 0) {print $0}}} else if (defaultfl != "") {if ($1==file && $3 == "") {print $0}} else {if ($1==file) {print $0}}}' | awk -v afterdate="$afterdate" -v beforedate="$beforedate" 'BEGIN{FS=OFS=";"; if (afterdate=="") {afterdate="1901-12-14"}; if (beforedate=="") {beforedate="9999-01-01"};} {for (i=4; i<NF+1; i+=1) {split($i, datearr, "_"); if (datearr[1] < beforedate && datearr[1] > afterdate) {print $0; next;}}}' | awk 'BEGIN{FS=OFS=";";} {if ($3 == "") {print $2":;-";} else {print $2":;"substr($3, 1, length($3)-1);}}' | column -t -s ";" | awk 'BEGIN{FS=OFS=":";} {print $1":"substr($2, 2, length($2));}'

}
make_secret_log() {
    check_env_variables
    shift 1
    while getopts ":a:b:" argum; do
        case "${argum}" in
            a)
                afterdate="${OPTARG}"
                ;;
            b)
                beforedate="${OPTARG}"
                ;;
            *)
                echo "Invalid options selected. Use -h for help." 1>&2
                exit 1
                ;;
        esac
    done
    shift "$((OPTIND-1))"

    check_args_correctness "secret-log" "$recentlyflag" "$afterdate" "$beforedate" "$defaultflag" "$groups"

    if [ "$1" = "" ]
    then
        awk -v afterdate="$afterdate" -v beforedate="$beforedate" 'BEGIN{FS=OFS=";"; if (afterdate=="") {afterdate="1901-12-14"}; if (beforedate=="") {beforedate="9999-01-01"};} {result = ""; for (i=4; i<NF+1; i+=1) {split($i, datearr, "_"); if (datearr[1] < beforedate && datearr[1] > afterdate) {if (result == "") {result = $1"/"$2";"$(i)} else {result = result";"$(i)}}} if (result != "") {print result;}}' "$MOLE_RC" | sort
        exit 0
    fi

    for i in "$@"
    do
        filename="$(realpath -s "$i")"
        if [ "$(find "$filename" -type d -maxdepth 0 -exec echo dir \; 2>/dev/null)" != "dir" ]
        then
            echo "mole secret_log needs folder as argument!" 1>&2
            exit 3
        fi
        if [ "$resultlog" = "" ]
        then
            resultlog=$(awk -v file="$filename" 'BEGIN{FS=OFS=";"} {if ($1==file) {print $0}}' "$MOLE_RC" | awk -v afterdate="$afterdate" -v beforedate="$beforedate" 'BEGIN{FS=OFS=";"; if (afterdate=="") {afterdate="1901-12-14"}; if (beforedate=="") {beforedate="9999-01-01"};} {result = ""; for (i=4; i<NF+1; i+=1) {split($i, datearr, "_"); if (datearr[1] < beforedate && datearr[1] > afterdate) {if (result == "") {result = $1"/"$2";"$(i)} else {result = result";"$(i)}}} if (result != "") {print result;}}')
        else
            resultlog="$resultlog
$(awk -v file="$filename" 'BEGIN{FS=OFS=";"} {if ($1==file) {print $0}}' "$MOLE_RC" | awk -v afterdate="$afterdate" -v beforedate="$beforedate" 'BEGIN{FS=OFS=";"; if (afterdate=="") {afterdate="1901-12-14"}; if (beforedate=="") {beforedate="9999-01-01"};} {result = ""; for (i=4; i<NF+1; i+=1) {split($i, datearr, "_"); if (datearr[1] < beforedate && datearr[1] > afterdate) {if (result == "") {result = $1"/"$2";"$(i)} else {result = result";"$(i)}}} if (result != "") {print result;}}')"

        fi
    done
    resultlog=$(echo "$resultlog" | sort)
    echo "$resultlog"
}


check_env_variables

if [ "$1" = "list" ]
then
    make_list "$@"
    exit 0
fi

if [ "$1" = "secret-log" ]
then
    make_secret_log "$@"
    exit 0
fi

while getopts ":hmdg:a:b:" argum; do
    case "${argum}" in
        h)
            usage
            ;;
        g)
            groups="${OPTARG}"
            ;;
        m)
            recentlyflag="true"
            ;;
        a)
            afterdate="${OPTARG}"
            ;;
        b)
            beforedate="${OPTARG}"
            ;;
        d)
            defaultflag="true"
            ;;
        *)
            echo "Invalid options selected. Use -h for help." 1>&2
            exit 1
            ;;
    esac
done
shift "$((OPTIND-1))"


if [ "$1" = "" ]
then
    filename="$(pwd)"
else
    filename="$(realpath -s "$1")"
fi


if [ "$(find "$filename" -type d -maxdepth 0 -exec echo dir \; 2>/dev/null)" = "" ]
then
    check_args_correctness "file" "$recentlyflag" "$afterdate" "$beforedate" "$defaultflag" "$groups" 
    filepath="$(echo "$filename" | rev | cut -d'/' -f 2- | rev)"
    onlyfilename="$(echo "$filename" | rev | cut -d'/' -f 1 | rev)"
    write_a_record "$filepath" "$onlyfilename" "$groups" "$(date "+%Y-%m-%d_%H-%M-%S")"
    eval "$editor $filename"
else
    check_args_correctness "dir" "$recentlyflag" "$afterdate" "$beforedate" "$defaultflag" "$groups"
    if [ "$recentlyflag" != "" ]
    then
        open_file_from_dir "frequently" "$filename" "$groups" "$afterdate" "$beforedate" "$defaultflag"
        filepath="$(echo "$filename" | rev | cut -d'/' -f 2- | rev)"
        onlyfilename="$(echo "$filename" | rev | cut -d'/' -f 1 | rev)"
        write_a_record "$filepath" "$onlyfilename" "$groups" "$(date "+%Y-%m-%d_%H-%M-%S")"
        eval "$editor $filename"
    else
        open_file_from_dir "recently" "$filename" "$groups" "$afterdate" "$beforedate" "$defaultflag"
        filepath="$(echo "$filename" | rev | cut -d'/' -f 2- | rev)"
        onlyfilename="$(echo "$filename" | rev | cut -d'/' -f 1 | rev)"
        write_a_record "$filepath" "$onlyfilename" "$groups" "$(date "+%Y-%m-%d_%H-%M-%S")"
        eval "$editor $filename"
    fi
fi